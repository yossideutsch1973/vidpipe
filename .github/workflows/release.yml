name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  test:
    name: Test Before Release
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1 libglib2.0-0 libsm6 libxext6 libfontconfig1 libxrender1
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        npm ci
    
    - name: Build frontend
      run: npm run build
    
    - name: Run tests
      run: make test
      env:
        QT_QPA_PLATFORM: offscreen
        PYTEST_DISABLE_PLUGIN_AUTOLOAD: 1
    
    - name: Test CLI functionality
      run: |
        python main.py --cli --help
        python main.py --cli -c "test-pattern -> grayscale" --tokens

  build:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build wheel
        npm ci
    
    - name: Build frontend
      run: npm run build
    
    - name: Build Python package
      run: |
        python -m build
    
    - name: Create source archive
      run: |
        git archive --format=tar.gz --prefix=vidpipe-${{ github.ref_name }}/ HEAD > vidpipe-${{ github.ref_name }}-source.tar.gz
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-artifacts
        path: |
          dist/*
          docs/main.js
          vidpipe-${{ github.ref_name }}-source.tar.gz

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [test, build]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts
        path: ./artifacts
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./artifacts/dist/*
          ./artifacts/vidpipe-*.tar.gz
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') }}
        body: |
          ## VidPipe ${{ github.ref_name }}
          
          ### What's New
          - See the full changelog in the commit history
          - All tests passing
          - Frontend built and included
          
          ### Installation
          ```bash
          git clone https://github.com/yossideutsch1973/vidpipe.git
          cd vidpipe
          pip install -r requirements.txt
          ```
          
          ### Quick Start
          ```bash
          # CLI usage
          python main.py --cli -c "webcam -> grayscale -> display"
          
          # GUI mode
          python main.py --gui
          ```
          
          For more information, see the [README](README.md) and [documentation](docs/).
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}